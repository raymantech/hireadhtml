/*"use strict";!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):a(jQuery)}(function(a){function f(a){var b=a.clone();return b.css({position:"absolute",width:a.width(),height:a.height(),"z-index":1e5}),b}function g(a,b,c){for(var k,l,m,n,o,p,q,d=a.offset(),e=a.width(),f=a.height(),g=d.left,h=d.left+e,i=d.top,j=d.top+f,r=0;r<c.length;r++)if(k=c.eq(r),k[0]!==b[0]&&(n=k.offset(),l=n.left+.5*k.width(),m=n.top+.5*k.height(),o=l<h&&l>g,p=m<j&&m>i,q=o&&p))return k[0]}function h(b,c,d){var e=g(b,c,d);if(e!==c[0]){var f=d.index(e),h=d.index(c);f<h?a(e).before(c):a(e).after(c),i(d,h,f)}}function i(a,b,c){var d=a.splice(b,1)[0];return a.splice(c,0,d)}function j(){return d+=1,".drag-arrange-"+d}var b="ontouchstart"in document.documentElement,c=5,d=0,e=function(){return b?{START:"touchstart",MOVE:"touchmove",END:"touchend"}:{START:"mousedown",MOVE:"mousemove",END:"mouseup"}}();a.fn.arrangeable=function(b){function s(b){if(n){var e=a(i),j=(b.clientX||b.originalEvent.touches[0].clientX)-k,q=(b.clientY||b.originalEvent.touches[0].clientY)-l;d?(b.stopPropagation(),g.css({left:o+j,top:p+q}),h(g,e,m)):(Math.abs(j)>c||Math.abs(q)>c)&&(g=f(e),o=i.offsetLeft-parseInt(e.css("margin-left"))-parseInt(e.css("padding-left")),p=i.offsetTop-parseInt(e.css("margin-top"))-parseInt(e.css("padding-top")),g.css({left:o,top:p}),e.parent().append(g),e.css("visibility","hidden"),d=!0)}}function t(b){d&&(b.stopPropagation(),d=!1,g.remove(),i.style.visibility="visible",a(i).parent().trigger(r,[a(i)])),n=!1}function u(){m.each(function(){var c=b.dragSelector,d=a(this);c?d.off(e.START+q,c):d.off(e.START+q)}),a(document).off(e.MOVE+q).off(e.END+q),m.eq(0).data("drag-arrange-destroy",null),m=null,s=null,t=null}var g,i,k,l,m,o,p,q,d=!1,n=!1;if("string"==typeof b&&"destroy"===b)return this.eq(0).data("drag-arrange-destroy")&&this.eq(0).data("drag-arrange-destroy")(),this;b=a.extend({dragEndEvent:"drag.end.arrangeable"},b);var r=b.dragEndEvent;m=this,q=j(),this.each(function(){function g(a){a.stopPropagation(),n=!0,k=a.clientX||a.originalEvent.touches[0].clientX,l=a.clientY||a.originalEvent.touches[0].clientY,i=d}var c=b.dragSelector,d=this,f=a(this);c?f.on(e.START+q,c,g):f.on(e.START+q,g)}),a(document).on(e.MOVE+q,s).on(e.END+q,t),this.eq(0).data("drag-arrange-destroy",u)}});*/
//# sourceMappingURL=drag-arrange.min.js.map



$(document).ready(function () {
    var $contentBox = $(".contentRBox");
    var contentBoxTop = $contentBox.offset().top;//获取外框的top值
    var contentBoxLeft = $contentBox.offset().left;//获取外框的left值

    var $contentBox2Ul = $contentBox.find(".contentBox2 ul");
    var $li = $contentBox2Ul.find("li");
    var ulLength = $contentBox2Ul.length;//ul的总数,房间的数量
    var liLength = $li.length;//li的总数,
    //每行的li数量，天数
    var eachLiLength = liLength / ulLength;
    //console.log("ulLength",ulLength);
    //console.log("liLength",liLength);
    var $hidden = $("#hiddenBox");//遮罩
    var liContent = null;//用来装格子的内容
    var divTop, divLeft;//格子的相对位置
    var liHeight, liWidth, className, x0, y0, thisliIndex, thisUlIndex, xMove, yMove;
    var $moveDiv = null;
    var leftMax, leftMin, topMax, topMin, xEnd, yEnd, xOver, yOver;
    var thisOffsetTop, thisOffsetLeft;//浮动div的相对当前格子的位置
    var topNum, leftNum, intTopNum, intLeftNum;//记录移动的坐标点
    var endX, endY;//最终的坐标
    var eqLi;//最终的坐标对应第几个li

    //鼠标点击li
    $li.mousedown(function (e) {
        var $this = $(this);

        //如果格子的内容为空，则不拖动
        if ($this.html() == "") {
            return false;
        }
        //获取li的宽度和高度
        liHeight = $this.height();
        liWidth = $this.width();

        //获取li中的内容，和类名
        liContent = $this.html();
        className = $this.attr("class");

        //获取x,y的点击坐标
        x0 = e.pageX;
        y0 = e.pageY;

        //包裹一层div
        $this.wrapInner("<div id='moveDiv'></div>");
        $moveDiv = $("#moveDiv");
        $moveDiv.addClass(className);//设置包裹div的class
        $this.removeClass();//移除当前li的class

        //获取li的相对位置，和点击坐标的差值，用于取拖动的范围
        divLeft = x0 - $moveDiv.offset().left;
        divTop = y0 - $moveDiv.offset().top;
        //console.log("divTop",divTop);
        //console.log("divLeft",divLeft);

        //获取当前li的位置
        thisliIndex = $this.index() + 1;//当前坐标x
        thisUlIndex = $this.parent().parent().index() + 1;//当前坐标y
        //$moveDiv.attr("thisliIndex",thisliIndex).attr("thisUlIndex",thisUlIndex);
        //console.log("thisliIndex",thisliIndex);
        //console.log("thisUlIndex",thisUlIndex);
        //释放遮罩
        $hidden.css("display", "block");
        e.stopPropagation();
    });

    $hidden.mousemove(function (e) {
        var $this = $(this);
        //$moveDiv=$("#moveDiv");
        xMove = e.pageX;//移动的x
        yMove = e.pageY;//移动的y

        //设置边界
        leftMax = (eachLiLength - 1) * 1240 + divLeft + contentBoxLeft;
        leftMin = contentBoxLeft + divLeft;
        topMax = (ulLength - 1) * 1800 + divTop + contentBoxTop;
        topMin = contentBoxTop + divTop;

        if (xMove >= leftMax) {
            xMove = leftMax;
        }
        if (xMove <= leftMin) {
            xMove = leftMin;
        }
        if (yMove >= topMax) {
            yMove = topMax;
        }
        if (yMove <= topMin) {
            yMove = topMin;
        }

        $moveDiv.css({//框跟着鼠标移动
            "left": xMove - x0,
            "top": yMove - y0
        });
    }).mouseup(function (e) {
        //$moveDiv=$("#moveDiv");
        xEnd = e.pageX;//移动到的x
        yEnd = e.pageY;//移动到的y
        thisOffsetTop = $moveDiv.position().top;//相对表格框的top
        thisOffsetLeft = $moveDiv.position().left;//相对表格框的left
        //console.log("thisOffsetTop",thisOffsetTop);
        //获取移动的相对坐标
        topNum = (thisOffsetTop / (parseInt(liHeight) + 1));
        leftNum = (thisOffsetLeft / (parseInt(liWidth) + 1));
        intTopNum = Math.round(topNum);
        intLeftNum = Math.round(leftNum);
        if (topNum - intTopNum < 0.5) {//如果坐标点小于0.5 则取这个整数
            yOver = intTopNum;
        }
        else {
            yOver = intTopNum + 1;//如果大于或者=0.5 ，则表示已经移动到了下一个格子
        }
        if (leftNum - intLeftNum < 0.5) {//同理
            xOver = intLeftNum;
        }
        else {
            yOver = intLeftNum + 1;
        }
        //console.log("xOver",xOver);//最终的相对坐标位置x
        //console.log("yOver",yOver);//最终的相对坐标位置y
        //console.log("liHeight",liHeight);
        //放入指定的格子
        endX = xOver + parseInt(thisliIndex);//计算出最终的坐标x
        endY = yOver + parseInt(thisUlIndex);//计算出最终的坐标y
        //console.log("endX",endX);
        //console.log("endY",endY);

        //计算出最终的格子对应的是第几个li
        eqLi = (endY - 1) * (liLength / ulLength) + endX;
        //console.log(eqLi);
        if ($li.eq(eqLi - 1).html() == "") {//如果要移入的对象为空，就移动过去
            $li.eq(eqLi - 1).addClass(className).html(liContent);//把之前获取的liContent加入到这个li格子里面
        }
        else {//如果移入的对象不为空
			// alert("重叠了！");
            $li.eq((thisUlIndex - 1) * eachLiLength + thisliIndex - 1).addClass(className).html(liContent);
        }
        $moveDiv.remove();//移除浮动div
        $(this).css("display", "none");//隐藏遮罩
    });
});